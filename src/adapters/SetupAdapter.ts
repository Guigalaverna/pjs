import { SetupAdapter as SetupAdapterType } from "../../@types/adapters/setup-adapter";
import { Setup } from "../../@types/Setup";

import * as YAML from "yaml";

import fs from "fs";
import path from "path";
import os from "os";

export class SetupAdapter implements SetupAdapterType {
  create(setup: Setup): void {
    const parsedStepsToCommand = setup.steps.map(step => {
      return `# ${step.description.toUpperCase()}
    ${step.command}`;
    });

    const script = `# THIS IS A AUTO-GENERATED FILE BY PJS
  # DO NOT EDIT THIS FILE DIRECTLY

  ${parsedStepsToCommand.join("\n")}`;

    fs.writeFileSync(
      path.join(os.homedir(), ".config", "pjs", "setups", `${setup.alias}.sh`),
      script
    );
    return;
  }
  list(filterByType?: string): Setup[] {
    const rawFile = fs.readFileSync(
      path.join(os.homedir(), ".config", "pjs", "setups.yaml"),
      "utf8"
    );
    const setups: Setup[] = YAML.parse(rawFile);

    switch (!!filterByType) {
      case true:
        return setups.filter(setup => setup.type === filterByType);
      case false:
        return setups;
    }
  }
}
