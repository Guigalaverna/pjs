import { SetupAdapter as SetupAdapterType } from "../../@types/adapters/setup-adapter";
import { Setup } from "../../@types/Setup";

import * as YAML from "yaml";

import fs from "fs";
import path from "path";
import os from "os";
import { log, LogCategory } from "../../src/lib/log";

export class SetupAdapter implements SetupAdapterType {
  create(setup: Setup): void {
    try {
      let header = "";
      switch (process.platform) {
        case "win32":
          header = "";
          break;
        case "darwin":
        case "linux":
        default:
      }
      let params: string[] = [];
      const parsedStepsToCommand = setup.steps.map(step => {
        // take all the params starting with $
        const param = step.command.split(" ").filter(param => param.startsWith("$"));
        // add param on params if not already in there
        param.forEach(param => {
          if (!params.includes(param)) {
            params.push(param);
          }
        }
        );

        return `# ${step.description.toUpperCase()}
      ${step.command}`;
      });

      // This process is just to make the params on Windows.
      switch(process.platform) {
        case "win32":
          header = "param(" + params.join(", ") + ")";
          break;
        case "darwin":
        case "linux":
        default:
          break;
      }

      log("DEBUG", JSON.stringify(params));

      const script = `
      ${header}
      # THIS IS A AUTO-GENERATED FILE BY PJS
      # DO NOT EDIT THIS FILE DIRECTLY
  
    ${parsedStepsToCommand.join("\n")}`;
      let extension;
      switch (process.platform) {
        case "win32":
          extension = "ps1";
          break;
        case "darwin":
        case "linux":
        default:
          extension = "sh";
      }
      fs.writeFileSync(
        path.join(
          os.homedir(),
          ".config",
          "pjs",
          "setups",
          `${setup.alias}.${extension}`
        ),
        script
      );
      return;
    } catch (err) {
      // @ts-ignore
      log("ERR", err.message);
    } finally {
      process.exit(0);
    }
  }
  list(filterByType?: string) {
    try {
      const rawFile = fs.readFileSync(
        path.join(os.homedir(), ".config", "pjs", "setups.yaml"),
        "utf8"
      );
      const setups: Setup[] = YAML.parse(rawFile);
      log("DEBUG", `setups: ${JSON.stringify(setups)}`);
      switch (!!filterByType) {
        case true:
          return setups.filter(setup => setup.type === filterByType);
        case false:
          return setups;
      }
    } catch (err) {
      // @ts-ignore
      log(LogCategory.ERROR, err.message);
    }
  }
}
